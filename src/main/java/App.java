import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.File;
import java.util.HashMap;
import java.util.List;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    

    public static void main(String[] args)throws Exception {
        //System.out.println(new App().getGreeting());
    	
    	String resource = "mybatis-config.xml";
		InputStream inputStream = Resources.getResourceAsStream(resource);
		SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
		
		SqlSession session = sqlSessionFactory.openSession();
		try {
			
			String query ="query.sample1";
			//exTraffic.roadInfo
			HashMap<String, Object> obj =new HashMap<String, Object>();
			obj.put("date1", "2018-08-06");
			//obj.put("date2", "2018-08-07");
			//String sql = session.getConfiguration().getMappedStatement(query).getBoundSql(obj).getSql();
			BoundSql boundSql = session.getConfiguration().getMappedStatement(query).getSqlSource().getBoundSql(obj);
			String sql = getQuery(query, obj, boundSql);
			System.out.println(query+":");
			System.out.println(sql);
			
			File directory = new File("sql/");
    		if (! directory.exists()){
        		directory.mkdir();
        		// If you require it to make the entire directory path including parents,
        		// use directory.mkdirs(); here instead.
    		}
			
	    	//파일 쓰기 
	    	
	    	BufferedWriter wr = new BufferedWriter(new FileWriter("sql/"+query+".sql"));
	    	
	    	wr.write(sql);
	    	wr.close();
	    	
	    	
			
		} finally {
		  session.close();
		}

    }
    
    public static String getQuery(String queryId, HashMap<String, Object> params, BoundSql boundSql){
    	
    	//BoundSql boundSql = sqlSession.getConfiguration().getMappedStatement(queryId).getSqlSource().getBoundSql(params);

    	

    	String query1 = boundSql.getSql();

    	

    	Object paramObj = boundSql.getParameterObject();
    	

    	if(paramObj != null){              // 파라미터가 아무것도 없을 경우

    		List<ParameterMapping> paramMapping = boundSql.getParameterMappings();

    		for(ParameterMapping mapping : paramMapping){

    			String propValue = mapping.getProperty();
    			
    			System.out.println(propValue);
    			System.out.println(params.get(propValue));
    			

    			//query1=query1.replaceFirst("\\?", "#{"+propValue+"}");
    			if(params.containsKey(propValue)){
    				//모두 String 이라고 가정함
    				query1=query1.replaceFirst("\\?", "'"+String.valueOf(params.get(propValue))+"'");
    			}else{
    				query1=query1.replaceFirst("\\?", "#{"+propValue+"}");
    			}

    		}

    	}

    	return query1; 



    
    	
    }
}
